SET SQL_SAFE_UPDATES = 0;
CREATE DATABASE TEST;
-- DISPLAY ALL THE DATABASES
SHOW DATABASES;
-- SWITCH TO THE DB
USE SAKILA;

-- FETCH STATIC VALUES
SELECT 'THURSDAY';
-- USER DEFINED COLUMN NAME
SELECT 'THURSDAY' AS 'DAY';

SELECT 100+200;
SELECT 100+200 AS TOTAL;

-- SCALAR FUNCTIONS
SELECT PI();
SELECT MOD(45,7);
SELECT SQRT(25);

-- SELECTING DATA FROM THE TABLES
SELECT * FROM ACTOR;
SELECT * FROM ACTOR
ORDER BY FIRST_NAME;
SELECT * FROM ACTOR
ORDER BY FIRST_NAME ASC;
SELECT * FROM ACTOR
ORDER BY FIRST_NAME DESC;
SELECT * FROM ACTOR
ORDER BY 3;
SELECT * FROM ACTOR
ORDER BY 3 DESC;

-- FILTERING ROWS
SELECT * FROM ACTOR WHERE ACTOR_ID < 6;
SELECT * FROM ACTOR WHERE LAST_NAME = 'GUINESS';

-- MULTI COLUMN SORT
SELECT * FROM ACTOR ORDER BY FIRST_NAME;
SELECT * FROM ACTOR ORDER BY FIRST_NAME ASC, LAST_NAME DESC;
-- INSTANT PRACTICE.
-- SORT THE ACTORS BY LAST_NAME ASC AND FIRST NAME DESCENDING USING THE COLUMN INDEX.
select * from ACTOR order by 3 ASC,2 DESC;

SELECT * FROM ACTOR WHERE FALSE;
SELECT * FROM ACTOR WHERE TRUE;
SELECT * FROM ACTOR WHERE 1 = 1;
SELECT * FROM ACTOR WHERE 1 = 2;

-- COUNT AGGREGATE FUNCTION
SELECT COUNT(*) FROM ACTOR;
-- INSTANT PRACTICE
-- SAM, A DATABASE DEVELOPER WOULD LIKE TO DISPLAY THE DETAILS OF ACTORS.
-- DISPLAY ALL THE COLUMNS IN THE SAME ORDER
-- return_date should be  'DATE OF RETURN' , inventory_id should be 'INVENTORY'.

SELECT rental_id, rental_date, inventory_id AS INVENTORY, customer_id, return_date AS 'DATE OF RETURN', 
staff_id, last_update FROM RENTAL;
SELECT * FROM RENTAL;

SELECT  1, 2, 3 AS 'INVENTORY', 4, 5 AS 'DATE OF RETURN', 6, 7 FROM RENTAL;  
SELECT * FROM PAYMENT;
SELECT AMOUNT, ROUND(AMOUNT) FROM PAYMENT;
SELECT ROUND(8.45) FROM PAYMENT;
SELECT ROUND(8.5) FROM PAYMENT;
SELECT ROUND(-14.33);
SELECT ROUND(1.234, 0);
SELECT ROUND(-14.73);
SELECT ROUND(1.234, 1);
-- PREDICT THE OUTPUT
-- MISTAKE 123.00
SELECT ROUND(1234.567, -1);
SELECT ROUND(1256.567, -2) AS 'ROUNED VALUE';

SELECT AMOUNT FROM PAYMENT;
SELECT ROUND(AMOUNT), ROUND(AMOUNT,0), ROUND(AMOUNT,1) FROM PAYMENT;
SELECT FLOOR(1.2);   
SELECT CEILING(1.2);
-- PREDICT 
SELECT FLOOR(-1.2);   -- -2 ..... -1
SELECT CEILING (-1.2);

-- STRING OPERATIONS

-- THE BELOW ARE ARITHMETIC AND NO CONCATENATION HAPPENS
SELECT 1 + 1 AS 'ADD';
SELECT '1' + '1' AS 'ADD';
SELECT '1A' + '1' AS 'ADD';
SELECT '1A' + 'B' AS 'ADD';
SELECT 'A2' + '1' AS 'ADD';
SELECT 'A2' + '2' AS 'ADD';
SELECT 'A2' + 'A2' AS 'ADD';

SELECT CONCAT(1,1) AS 'CONCATENATE';
SELECT CONCAT('1','1') AS 'CONCATENATE';
SELECT CONCAT('A2', '2') AS 'CONCATENATE';
SELECT CONCAT('RED',  ' GREEN', ' BLUE') AS 'COLORS';
SELECT * FROM ACTOR;
-- IP
-- FORMAT ACTOR_ID, 'FULL NAME' 
-- FIRST NAME : ED LAST NAME : CHASE
-- RESULT : 3, FIRST NAME : ED LAST NAME : CHASE 
SELECT ACTOR_ID, CONCAT('FIRST_NAME : ', FIRST_NAME , ' LAST NAME : ', LAST_NAME) AS 'FULL NAME' FROM ACTOR;

SELECT LOWER(FIRST_NAME) FROM ACTOR;
SELECT UPPER(FIRST_NAME) FROM ACTOR;
SELECT LEFT(FIRST_NAME,2) FROM ACTOR;
SELECT LOWER(LEFT(FIRST_NAME,2)) FROM ACTOR;

SELECT * FROM ACTOR;
-- IP
-- 'REVERSE FULL NAME'
-- ESAHC DE
SELECT CONCAT(REVERSE(LAST_NAME),' ', REVERSE(FIRST_NAME)) FROM ACTOR;
Select REVERSE(CONCAT(FIRST_NAME,' ',LAST_NAME)) AS 'REVERSE FULL NAME' FROM ACTOR;

-- IP
--  'NAME WITH INTIAL'
--  GRANT.A
--  GARLAND.A
SELECT CONCAT(last_name, '.' ,left(First_name,1)) As 'name with initial' from actor;
SELECT REVERSE(FIRST_NAME) FROM ACTOR;

-- SELECT LAST UPDATE FROM ACTOR;
SELECT LAST_UPDATE FROM ACTOR;
SELECT DATE_FORMAT(LAST_UPDATE,'%m/%d/%y') AS 'LAST UPDATE' FROM ACTOR;
SELECT DATE_FORMAT(LAST_UPDATE,'%m-%d-%y') AS 'LAST UPDATE' FROM ACTOR;
SELECT WEEK(LAST_UPDATE) FROM ACTOR;
SELECT (PAYMENT_DATE) FROM PAYMENT;

-- IP
-- DAYOFWEEK, NAMEOFMONTH, QUARTER
-- PAYMENT_DATE (PAYMENT)

SELECT * FROM ACTOR;
SELECT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME;
SELECT DISTINCT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME;
-- CTRL + ENTER FOR EXECUTION 
SELECT COUNT(*) FROM ACTOR;
SELECT COUNT(FIRST_NAME) FROM ACTOR;
SELECT COUNT(DISTINCT FIRST_NAME) FROM ACTOR;

-- FILTER ROWS
SELECT COUNT(*) FROM ACTOR 
WHERE FIRST_NAME = 'NICK';
SELECT * FROM ACTOR WHERE FIRST_NAME = 'NICK';
SELECT * FROM ACTOR WHERE ACTOR_ID < 5;
-- IP WILL IT INCLUDE 1 AND 5
-- RANGE OPERATOR
SELECT * FROM ACTOR WHERE ACTOR_ID BETWEEN 1 AND 5;
SELECT * FROM ACTOR WHERE ACTOR_ID NOT BETWEEN 1 AND 5;
-- PREDICT THE OUTPUT
SELECT * FROM ACTOR WHERE FIRST_NAME like 'A%' order by first_name asc;
-- IP
SELECT * FROM ACTOR WHERE FIRST_NAME <= 'AL%';
-- IP
-- DISPLAY ALL THE ACTORS WHOSE FIRST NAME IS OF 4 CHARACTERS. 
SELECT * FROM ACTOR WHERE LENGTH(FIRST_NAME) = 4;
SELECT * FROM actor WHERE FIRST_NAME LIKE "____";
-- ALL 5 LETTERED LAST NAMES ENDING WITH Y.
SELECT * FROM ACTOR WHERE LAST_NAME LIKE '____y' ORDER BY FIRST_NAME;
SELECT * FROM ACTOR WHERE LENGTH(LAST_NAME) = 5 AND LAST_NAME LIKE '%y' ORDER BY LAST_NAME;
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH';
-- IP
-- ACTORS WHOSE 
-- FIRST NAME CAN BE KENNETH, 
-- ACTOR_ID SHOULD BE < 100 
-- LAST_NAME SHOULD END WITH 'I' OR 'W'
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH' AND ACTOR_ID < 100 AND (LAST_NAME LIKE '%I' OR LAST_NAME LIKE '%W');
-- IP
-- ALL ACTORS WHOSE ID IS 5,15,23,32,45
-- ALL ACTORS WHOSE ID IS SHOULD NOT BE 1,3,7,4
-- IN AND NOT IN (RANGE OPERATORS)
SELECT * FROM ACTOR WHERE ACTOR_ID IN (5,15,23,32,45) ;
SELECT * FROM ACTOR WHERE ACTOR_ID NOT IN (1,3,7,4) ;
-- MIGRATE THE ABOVE QUERIES WITHOUT USING IN OR NOT IN.
SELECT * FROM ACTOR WHERE actor_id = '5' or actor_id = '15' or actor_id = '23' or actor_id = '32' or actor_id = '45';
SELECT * FROM ACTOR WHERE NOT (actor_id = '1' or actor_id = '3' or actor_id = '4' or actor_id = '7');

-- IP
-- DISP ALL THE ACTORS WHOSE LAST NAME IS THE SAME AS CUBA (FIRST_NAME).
SELECT * FROM ACTOR WHERE LAST_NAME IN (SELECT LAST_NAME FROM ACTOR WHERE FIRST_NAME = 'CUBA');
SELECT * FROM ACTOR WHERE LAST_NAME = 'OLIVIER' OR LAST_NAME = 'ALLEN' OR LAST_NAME = 'BIRCH'
 ORDER BY ACTOR_ID ASC;
-- MIG. IT SHOULD NOT USE (IN, NOT IN)
-- HINT MODIFIED COMPARISION OPERATORS (> ANY, < ANY, = ANY, <> ANY)
SELECT * FROM ACTOR WHERE LAST_NAME = ANY (SELECT LAST_NAME FROM ACTOR WHERE FIRST_NAME = 'CUBA');

SELECT * FROM ACTOR ORDER BY LAST_NAME;
-- DISP ALL ACTORS 

SELECT * FROM ADDRESS;
UPDATE ADDRESS SET ADDRESS2 = NULL;
UPDATE ADDRESS SET ADDRESS2 = 'DEMO ADDRESS' WHERE ADDRESS_ID = 1;
UPDATE ADDRESS SET ADDRESS2 = 'DEMO ADDRESS 2' WHERE ADDRESS_ID = 2;
SELECT * FROM ADDRESS WHERE ADDRESS2 IS NOT NULL;
SELECT * FROM ADDRESS WHERE ADDRESS2 IS  NULL;
UPDATE ADDRESS SET ADDRESS2 = '' WHERE ADDRESS_ID = 3;
-- HOW MANY RECORDS DOES THE QUERY BELOW FETCH
-- SELECT * FROM ADDRESS WHERE ADDRESS2 IS  NULL;
SELECT * FROM ADDRESS WHERE ADDRESS2 IS  NOT NULL;
SELECT * FROM ADDRESS WHERE ADDRESS2 = '';
--  '' AND NOT NULL ARE NOT EQUAL
-- NULL REPRESENTS MISSING INFORMATION.
SELECT COUNT(ADDRESS_ID) FROM ADDRESS;
